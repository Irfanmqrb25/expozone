// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId
  carts          Cart[]    @relation("UserCarts")

  accounts       Account[]
  store          Store[]
  order          Order[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String? @db.String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Store {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  image       String?
  name        String
  email       String
  country     String
  address     String
  city        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  name        String
  image       String
  category    String
  description String
  price       Int
  stock       Int
  isFeatured  Boolean 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItem    CartItem[]

  store       Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  order       Order[]
}

model Cart {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  user           User?      @relation("UserCarts", fields: [userId], references: [id], onDelete: Cascade)
  userId         String?    @map("user_id") @db.ObjectId

  items          CartItem[]
}

model CartItem {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime   @default(now())
  quantity       Int
  total          Float

  product        Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart           Cart       @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId      String     @map("product_id") @db.ObjectId
  cartId         String     @map("cart_id") @db.ObjectId
}


model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  recipient     String
  phone         String
  address       String
  postalCode    String
  payment       String
  cardNumber    String?
  productId     String      @db.ObjectId
  quantity      Int
  shipment      String
  totalPrice    Int
  status        String      @default("process")
  createdAt     DateTime    @default(now())

  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}